{"version":3,"sources":["Navbar.js","BlogList.js","useFetch.js","Home.js","Create.js","BlogDetails.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","style","color","backgroundColor","borderRadius","BlogList","props","blogs","title","map","blog","key","id","author","useFetch","url","useState","data","setData","isPending","setIsPending","error","setError","useEffect","abortController","AbortController","setTimeout","fetch","signal","then","response","console","log","ok","Error","json","catch","name","message","abort","Home","Create","setTitle","body","setBody","setAuthor","history","useHistory","onSubmit","e","preventDefault","method","headers","JSON","stringify","push","type","required","value","onChange","target","disabled","BlogDetails","useParams","onClick","NotFound","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.571eb641.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar\">\n      <h1>The Dojo Blog</h1>\n      <div className=\"links\">\n        <Link to=\"/\">Home</Link>\n        <Link\n          to=\"/create\"\n          style={{\n            color: \"white\",\n            backgroundColor: \"#f1356d\",\n            borderRadius: \"8px\",\n          }}\n        >\n          New Blog\n        </Link>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst BlogList = (props) => {\n  const { blogs, title } = props;\n\n  return (\n    <div className=\"blog-list\">\n      <h2>{title}</h2>\n      {blogs.map((blog) => (\n        <div className=\"blog-preview\" key={blog.id}>\n          <Link to={`blogs/${blog.id}`}>\n            <h2>{blog.title}</h2>\n            <p>Written by {blog.author}</p>\n          </Link>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default BlogList;\n","import { useEffect, useState } from \"react\";\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    setTimeout(() => {\n      fetch(url, { signal: abortController.signal })\n        .then((response) => {\n          console.log(response);\n          // Checking if the response is 200.\n          if (!response.ok) {\n            throw new Error(\"Counld fetch the response\");\n          }\n          return response.json();\n        })\n        .then((data) => {\n          setError(null);\n          setData(data);\n          setIsPending(false);\n        })\n        // Catching connection errors.\n        .catch((error) => {\n          if (error.name === \"AbortError\") {\n            console.log(\"fetch aborted\");\n          } else {\n            setIsPending(false);\n            console.log(error.message);\n            setError(error.message);\n          }\n        });\n    }, 300);\n\n    return () => abortController.abort();\n  }, []);\n\n  return { data, isPending, error };\n};\n\nexport default useFetch;\n","import React from \"react\";\nimport BlogList from \"./BlogList\";\nimport useFetch from \"./useFetch\";\n\nconst Home = () => {\n  const { data, isPending, error } = useFetch(\"http://localhost:8000/blogs\");\n\n  return (\n    <div className=\"home\">\n      {error && <div>{error}</div>}\n      {isPending && <div>Loading</div>}\n      {data && <BlogList blogs={data} title=\"All blogs\" />}\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Create = () => {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [author, setAuthor] = useState(\"mario\");\n  const [isPending, setIsPending] = useState(false);\n  const history = useHistory();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const blog = { title, body, author };\n\n    setIsPending(true);\n    fetch(\"http://localhost:8000/blogs\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(blog),\n    }).then(() => {\n      setIsPending(false);\n      history.push(\"/\");\n    });\n  };\n\n  return (\n    <div className=\"create\">\n      <h2>Add a new content</h2>\n      <form onSubmit={handleSubmit}>\n        <label>Blog title:</label>\n        <input\n          type=\"text\"\n          required\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <label>Blog body:</label>\n        <textarea\n          required\n          value={body}\n          onChange={(e) => setBody(e.target.value)}\n        ></textarea>\n        <label>Blog author:</label>\n        <select value={author} onChange={(e) => setAuthor(e.target.value)}>\n          <option value=\"mario\">Mario</option>\n          <option value=\"yoshi\">Yoshi</option>\n        </select>\n        {isPending && <button disabled>Adding blog...</button>}\n        {!isPending && <button>Add Blog</button>}\n        <p>{title}</p>\n        <p>{body}</p>\n        <p>{author}</p>\n      </form>\n    </div>\n  );\n};\n\nexport default Create;\n","import React from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport useFetch from \"./useFetch\";\n\nconst BlogDetails = () => {\n  const { id } = useParams();\n  const history = useHistory();\n  const {\n    data: blog,\n    error,\n    isPending,\n  } = useFetch(\"http://localhost:8000/blogs/\" + id);\n\n  const handleClick = () => {\n    fetch(\"http://localhost:8000/blogs/\" + blog.id, {\n      method: \"DELETE\",\n    }).then(() => {\n      history.push(\"/\");\n    });\n  };\n\n  return (\n    <div className=\"blog-details\">\n      {isPending && <div>Loading...</div>}\n      {error && <div>Error fetching the data: {error}</div>}\n      {blog && (\n        <article>\n          <h2>{blog.title}</h2>\n          <p>Written by {blog.author}</p>\n          <div>{blog.body}</div>\n          <button onClick={handleClick}>Delete</button>\n        </article>\n      )}\n    </div>\n  );\n};\n\nexport default BlogDetails;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => {\n  return (\n    <div className=\"not-found\">\n      <h2>Sorry</h2>\n      <p>That page cannot be found</p>\n      <Link to=\"/\">Back to the homepage...</Link>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport Home from \"./Home\";\nimport Create from \"./Create\";\nimport BlogDetails from \"./BlogDetails\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NotFound from \"./NotFound\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <div className=\"content\">\n          <Switch>\n            <Route exact path=\"/create\">\n              <Create />\n            </Route>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/blogs/:id\">\n              <BlogDetails />\n            </Route>\n            <Route exact path=\"*\">\n              <NotFound />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}