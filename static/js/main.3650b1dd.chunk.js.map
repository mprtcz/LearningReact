{"version":3,"sources":["Navbar.js","BlogList.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","style","color","backgroundColor","borderRadius","BlogList","props","blogs","title","handleDelete","map","blog","key","id","author","onClick","Home","useState","setBlogs","isPending","setIsPending","error","setError","useEffect","setTimeout","fetch","then","response","console","log","ok","Error","json","data","catch","message","newBlogs","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kJAkBeA,G,KAhBA,WACX,OACI,yBAAKC,UAAU,UACX,6CACA,yBAAKA,UAAU,SACX,uBAAGC,KAAK,KAAR,QACA,uBAAGA,KAAK,UAAUC,MAAO,CACrBC,MAAO,QACPC,gBAAiB,UACjBC,aAAc,QAHlB,gB,OCcDC,EApBE,SAACC,GAAU,IAIlBC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,aAEtB,OACE,yBAAKV,UAAU,aACb,4BAAKS,GACJD,EAAMG,KAAI,SAACC,GAAD,OACT,yBAAKZ,UAAU,eAAea,IAAKD,EAAKE,IACtC,4BAAKF,EAAKH,OACV,yCAAeG,EAAKG,QACpB,4BAAQC,QAAS,kBAAMN,EAAaE,EAAKE,MAAzC,qBCkCKG,EA9CF,WAAO,IAAD,EACSC,mBAAS,MADlB,mBACVV,EADU,KACHW,EADG,OAEiBD,oBAAS,GAF1B,mBAEVE,EAFU,KAECC,EAFD,OAGSH,mBAAS,MAHlB,mBAGVI,EAHU,KAGHC,EAHG,KAmCjB,OAzBAC,qBAAU,WACRC,YAAW,WACTC,MAAM,+BACHC,MAAK,SAACC,GAGL,GAFAC,QAAQC,IAAIF,IAEPA,EAASG,GACZ,MAAM,IAAIC,MAAM,6BAElB,OAAOJ,EAASK,UAEjBN,MAAK,SAACO,GACLX,EAAS,MACTJ,EAASe,GACTb,GAAa,MAGdc,OAAM,SAACb,GACND,GAAa,GACbQ,QAAQC,IAAIR,EAAMc,SAClBb,EAASD,EAAMc,cAElB,OACF,IAGD,yBAAKpC,UAAU,QACZsB,GAAS,6BAAMA,GACfF,GAAa,wCACbZ,GACC,kBAAC,EAAD,CAAUA,MAAOA,EAAOC,MAAM,YAAYC,aAnC3B,SAACI,GACpB,IAAMuB,EAAW7B,EAAM8B,QAAO,SAAC1B,GAAD,OAAUA,EAAKE,KAAOA,KACpDK,EAASkB,QCMEE,MAZf,WAEE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,SCEYwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAb,GACLO,QAAQP,MAAMA,EAAMc,a","file":"static/js/main.3650b1dd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = () => {\n    return ( \n        <nav className=\"navbar\">\n            <h1>The Dojo Blog</h1>\n            <div className=\"links\">\n                <a href=\"/\">Home</a>\n                <a href=\"/create\" style={{\n                    color: \"white\",\n                    backgroundColor: '#f1356d',\n                    borderRadius: '8px'\n                }}>New Blog</a>\n            </div>\n        </nav>\n     );\n}\n \nexport default Navbar;","import React from \"react\";\n\nconst BlogList = (props) => {\n  //   const blogs = props.blogs;\n  //   const title = props.title;\n\n  const { blogs, title, handleDelete } = props;\n\n  return (\n    <div className=\"blog-list\">\n      <h2>{title}</h2>\n      {blogs.map((blog) => (\n        <div className=\"blog-preview\" key={blog.id}>\n          <h2>{blog.title}</h2>\n          <p>Written by {blog.author}</p>\n          <button onClick={() => handleDelete(blog.id)}>Delete blog</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default BlogList;\n","import React, { useState, useEffect } from \"react\";\nimport BlogList from \"./BlogList\";\n\nconst Home = () => {\n  const [blogs, setBlogs] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  const handleDelete = (id) => {\n    const newBlogs = blogs.filter((blog) => blog.id !== id);\n    setBlogs(newBlogs);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(\"http://localhost:8000/blogs\")\n        .then((response) => {\n          console.log(response);\n          // Checking if the response is 200.\n          if (!response.ok) {\n            throw new Error(\"Counld fetch the response\");\n          }\n          return response.json();\n        })\n        .then((data) => {\n          setError(null);\n          setBlogs(data);\n          setIsPending(false);\n        })\n        // Catching connection errors.\n        .catch((error) => {\n          setIsPending(false);\n          console.log(error.message);\n          setError(error.message);\n        });\n    }, 1000);\n  }, []);\n\n  return (\n    <div className=\"home\">\n      {error && <div>{error}</div>}\n      {isPending && <div>Loading</div>}\n      {blogs && (\n        <BlogList blogs={blogs} title=\"All blogs\" handleDelete={handleDelete} />\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport Navbar from './Navbar'\nimport Home from './Home'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"content\">\n        <Home />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}